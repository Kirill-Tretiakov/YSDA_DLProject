import telebot
from config import BOT_TOKEN

import torch
from safetensors.torch import load_file
from transformers import AutoConfig, AutoTokenizer

from model import CustomModel

class ChatAdministratorBot:
    def __init__(self, api_token, model_path, silent_mode=False):
        self.bot = telebot.TeleBot(api_token)
        self.tokenizer = AutoTokenizer.from_pretrained("blanchefort/rubert-base-cased-sentiment")
        self.config = AutoConfig.from_pretrained(model_path)
        self.model = CustomModel.from_config(self.config)
        
        self.model.load_state_dict(load_file(f"{model_path}/model.safetensors"))
        self.model.eval()

        self.silent_mode = silent_mode
        
        self.questions = []
        self.feedback = []
        self.important = []
        self.spam = []

        self.bot.message_handler(commands=['start'])(self.send_welcome)
        self.bot.message_handler(commands=['help'])(self.send_help)
        self.bot.message_handler(commands=['questions'])(self.send_questions)
        self.bot.message_handler(commands=['feedback'])(self.send_feedback)
        self.bot.message_handler(commands=['important'])(self.send_important)
        self.bot.message_handler(commands=['spam'])(self.send_spam)
        self.bot.message_handler(func=lambda message: True)(self.message_processing)

    def send_welcome(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        self.bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòé. –£–º–µ—é —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º üö´, —Å–æ–±–∏—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã üìù –∏ –æ—Ç–∑—ã–≤—ã ‚≠êÔ∏è")

    def send_help(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        self.bot.reply_to(
            message,
            "üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ üìö\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ. –í–æ—Ç —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç:\n\n"
            "üîπ /questions ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã üìù\n"
            "üîπ /feedback ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ‚≠êÔ∏è\n"
            "üîπ /important ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚ùóÔ∏è\n"
            "üîπ /spam ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∞–º–æ–º üö´"
        )

    def send_questions(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /questions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        if self.questions:
            self.bot.send_message(
                message.chat.id,
                "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã üìã:\n\n" + "\n".join(self.questions)
            )
            self.questions = []
        else:
            self.bot.send_message(message.chat.id, "–ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ üòé")

    def send_feedback(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"""
        if self.feedback:
            self.bot.send_message(
                message.chat.id,
                "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã üìã:\n\n" + "\n".join(self.feedback)
            )
            self.feedback = []
        else:
            self.bot.send_message(message.chat.id, "–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –±—ã–ª–æ üòé")

    def send_important(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /important - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.important:
            self.bot.send_message(
                message.chat.id,
                "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üìã:\n\n" + "\n".join(self.important)
            )
            self.important = []
        else:
            self.bot.send_message(message.chat.id, "–ù–æ–≤—ã—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ üòé")

    def send_spam(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /spam - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—é –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.spam:
            self.bot.send_message(
                message.chat.id,
                "–£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∞–º üìï:\n\n" + "\n".join(self.spam)
            )
            self.spam = []
        else:
            self.bot.send_message(message.chat.id, "–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–ø–∞–º–æ–º –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ üòé")

    def message_processing(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        id2label = self.model.config.id2label

        inputs = self.tokenizer(message.text, return_tensors="pt", truncation=True, padding=True)
        with torch.no_grad():
            outputs = self.model(**inputs)
            logits = outputs.logits
            predicted_class = torch.argmax(logits, dim=1).item()

        if id2label[predicted_class] == "QUESTION":
            self.questions.append(message.text)
        elif id2label[predicted_class] == "FEEDBACK":
            self.feedback.append(message.text)
        elif id2label[predicted_class] == "IMPORTANT":
            self.important.append(message.text)
        elif id2label[predicted_class] == "SPAM":
            self.spam.append(message.text)
            try:
                self.bot.delete_message(message.chat.id, message.message_id)
                self.bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ üö®")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}. –ë–æ—Ç—É –Ω–µ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")

        if not self.silent_mode:
            self.bot.send_message(message.chat.id, id2label[predicted_class])

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling(none_stop=True)

if __name__ == "__main__":
    model_path = "./model"

    bot = ChatAdministratorBot(BOT_TOKEN, model_path)
    bot.run()
